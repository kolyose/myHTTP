{"version":3,"sources":["../../../src/http/req/HttpRequestStateProcessingHeaders.js"],"names":["StateProcessingBody","require","HttpRequestStateProcessingHeaders","httpRequest","_tempBuffer","data","Buffer","concat","completeRequest","_getCompleteRequest","tempBuffer","requestData","_parseRequestInfo","head","socket","unshift","body","_headInfo","buffer","tempString","toString","indexOf","requestParts","split","result","headers","requestHead","requestRecords","requestParams","shift","method","path","protocol","requestRecord","recordParts","module","exports"],"mappings":";;;;;;AAAA,IAAMA,sBAAsBC,QAAQ,kCAAR,CAA5B;;IAEMC,iC;AACF,+CAAYC,WAAZ,EAAwB;AAAA;;AACpB,aAAKA,WAAL,GAAmBA,WAAnB;AACA,aAAKC,WAAL;AACH;;;;gCAEM,CAEN;;;+BAEK,CAEL;;;+BAEMC,I,EAAK;AACR,gBAAI,KAAKD,WAAT,EACI,KAAKA,WAAL,GAAmBE,OAAOC,MAAP,CAAc,CAAC,KAAKH,WAAN,EAAmBC,IAAnB,CAAd,CAAnB,CADJ,KAGI,KAAKD,WAAL,GAAmBC,IAAnB;;AAEJ,gBAAMG,kBAAkB,KAAKC,mBAAL,CAAyBC,UAAzB,CAAxB;AACA,gBAAIF,eAAJ,EAAoB;AAChB,oBAAMG,cAAc,KAAKC,iBAAL,CAAuBJ,gBAAgBK,IAAvC,CAApB;AACA,qBAAKV,WAAL,CAAiBW,MAAjB,CAAwBC,OAAxB,CAAgCP,gBAAgBQ,IAAhD;AACA,qBAAKb,WAAL,CAAiBc,SAAjB,GAA6BN,WAA7B;AACH;AACJ;;;4CAEmBO,M,EAAO;AACvB,gBAAIC,aAAaD,OAAOE,QAAP,CAAgB,OAAhB,CAAjB;AACA,gBAAI,CAACD,WAAWE,OAAX,CAAmB,UAAnB,CAAL,EAAoC;AAChC,oBAAMC,eAAeH,WAAWI,KAAX,CAAiB,UAAjB,CAArB;AACA,uBAAO;AACHV,0BAAMS,aAAa,CAAb,CADH;AAEHN,0BAAMM,aAAa,CAAb;AAFH,iBAAP;AAIH;AACJ;;;0CAEiBJ,M,EAAO;AACrB,gBAAMM,SAAS,EAAf;AACAA,mBAAOC,OAAP,GAAiB,EAAjB;;AAEA,gBAAMC,cAAcR,OAAOE,QAAP,CAAgB,OAAhB,CAApB;AACA,gBAAMO,iBAAiBD,YAAYH,KAAZ,CAAkB,MAAlB,CAAvB;AACA,gBAAMK,gBAAgBD,eAAeE,KAAf,GAAuBN,KAAvB,CAA6B,GAA7B,CAAtB;;AAEAC,mBAAOM,MAAP,GAAgBF,cAAc,CAAd,CAAhB;AACAJ,mBAAOO,IAAP,GAAcH,cAAc,CAAd,CAAd;AACAJ,mBAAOQ,QAAP,GAAkBJ,cAAc,CAAd,CAAlB;;AAVqB;AAAA;AAAA;;AAAA;AAYrB,qCAA0BD,cAA1B,8HAAyC;AAAA,wBAAhCM,aAAgC;;AACrC,wBAAMC,cAAcD,cAAcV,KAAd,CAAoB,IAApB,CAApB;AACAC,2BAAOC,OAAP,CAAeS,YAAY,CAAZ,CAAf,IAAiCA,YAAY,CAAZ,CAAjC;AACH;AAfoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBrB,mBAAOV,MAAP;AACH;;;;;;AAGLW,OAAOC,OAAP,GAAiBlC,iCAAjB","file":"HttpRequestStateProcessingHeaders.js","sourcesContent":["const StateProcessingBody = require('./HttpRequestStateProcessingBody');\r\n\r\nclass HttpRequestStateProcessingHeaders{\r\n    constructor(httpRequest){\r\n        this.httpRequest = httpRequest;\r\n        this._tempBuffer;\r\n    }\r\n\r\n    entry(){\r\n\r\n    }\r\n\r\n    exit(){\r\n\r\n    }\r\n\r\n    onData(data){\r\n        if (this._tempBuffer) \r\n            this._tempBuffer = Buffer.concat([this._tempBuffer, data]);\r\n        else\r\n            this._tempBuffer = data;\r\n\r\n        const completeRequest = this._getCompleteRequest(tempBuffer);\r\n        if (completeRequest){\r\n            const requestData = this._parseRequestInfo(completeRequest.head);     \r\n            this.httpRequest.socket.unshift(completeRequest.body); \r\n            this.httpRequest._headInfo = requestData;\r\n        } \r\n    }\r\n\r\n    _getCompleteRequest(buffer){\r\n        let tempString = buffer.toString('utf-8');    \r\n        if (~tempString.indexOf('\\r\\n\\r\\n')){\r\n            const requestParts = tempString.split('\\r\\n\\r\\n');\r\n            return {\r\n                head: requestParts[0],\r\n                body: requestParts[1]\r\n            };\r\n        }\r\n    }\r\n\r\n    _parseRequestInfo(buffer){\r\n        const result = {};\r\n        result.headers = {};\r\n        \r\n        const requestHead = buffer.toString('utf-8');\r\n        const requestRecords = requestHead.split('\\r\\n');\r\n        const requestParams = requestRecords.shift().split(' ');\r\n\r\n        result.method = requestParams[0];\r\n        result.path = requestParams[1];\r\n        result.protocol = requestParams[2];\r\n\r\n        for (let requestRecord of requestRecords){\r\n            const recordParts = requestRecord.split(': ');\r\n            result.headers[recordParts[0]] = recordParts[1];\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\nmodule.exports = HttpRequestStateProcessingHeaders;"]}